
#ifndef __ESUNNY_QUOTE_API_SECTION__
#define __ESUNNY_QUOTE_API_SECTION__

#include "EsunnyQuoteApiStruct.h"

#ifdef ESUNNYQUOTEAPI_EXPORTS
#define ESUNNYQUOTEAPI _declspec(dllexport)
#else
#define ESUNNYQUOTEAPI
#endif

namespace esunny_quote_api {
//ï¿½ï¿½ï¿½ï¿½Apiï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½
class CEsunnyQuoteSpi {
 public:
  //ï¿½ï¿½ï¿½Í»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Î´ï¿½ï¿½Â¼Ç°ï¿½ï¿½ï¿½ï¿½ï¿½Ã·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¡ï¿??
  //Í¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½Â¼ï¿½ï¿½ï¿½ï¿??
  virtual void OnFrontConnected() {};

  //ï¿½ï¿½ï¿½Í»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¶Ï¿ï¿½Ê±ï¿½ï¿½ï¿½Ã·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¡ï¿??
  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APIï¿½ï¿½ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¡ï¿½
  //@param  nReason ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½
  //        0x1001 ï¿½ï¿½ï¿½ï¿½ï¿½Ê§ï¿½ï¿??
  //        0x1002 ï¿½ï¿½ï¿½ï¿½Ð´Ê§ï¿½ï¿½
  //        0x2001 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±
  //        0x2002 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê§ï¿½ï¿½
  //        0x2003 ï¿½Õµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  virtual void OnFrontDisconnected(int nReason) {};

  //ï¿½ï¿½Â¼Ó¦ï¿½ï¿½
  //@param  pRspUserLogin Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQuoteLogin(ESunnyQuoteRspUserLoginField* pRspUserLogin,
                               ESunnyQuoteErrorInfo* errorInfo, int requestID,
                               bool bIsLast) {};

  //ï¿½Ç³ï¿½Ó¦ï¿½ï¿½
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  virtual void OnRspQuoteLogout(ESunnyQuoteErrorInfo* errorInfo,
                                int requestID) {};

  //ï¿½Þ¸ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  virtual void OnRspChangePassword(ESunnyQuoteErrorInfo* errorInfo,
                                   int requestID) {};

  //ï¿½ï¿½ï¿½Í¿Í»ï¿½ï¿½ï¿½ï¿½Ë³ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½ï¿½Í»ï¿½ï¿½ï¿½
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  virtual void OnRtnClientExit(ESunnyQuoteErrorInfo* errorInfo) {};

  //ï¿½ï¿½ï¿½Í½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½Â½ï¿½É¹ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
  //@param  data
  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½Ì¨Ö§ï¿½ÖµÄ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½?
  virtual void OnRtnExchangeList(ESunnyExchangeItemField* pData,
                                 bool isLast) {};

  //ï¿½ï¿½ï¿½ï¿½UDPï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½initï¿½Ä²ï¿½ï¿½ï¿½servertype=QST_UDPTICKï¿½ï¿½ï¿½ï¿½ï¿½Â¼ï¿½É¹ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param  data UDPï¿½ï¿½Ï¢ï¿½ï¿½SubscribeUdpInfoï¿½Ãµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý£ï¿½
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½?
  virtual void OnRtnUdpInfoData(const ESunnyUdpInfoField& data, bool isLast) {};

  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspSubscribeMarketData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspUnSubscribeMarketData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspSubscribeKLineData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspUnSubscribeKLineData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ô¼Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryInstrument(ESunnyInstrumentField* pData,
                                  ESunnyQuoteErrorInfo* errorInfo,
                                  int requestID, bool isLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryHisSnapshotQuote(ESunnyQuoteMarketField* pData,
                                        ESunnyQuoteErrorInfo* errorInfo,
                                        int requestID, bool isLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryKLineQuote(ESunnyQuoteKLine* pData,
                                  ESunnyQuoteErrorInfo* errorInfo,
                                  int requestID, bool isLast) {};

  //ï¿½ï¿½ï¿½Í¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½
  // SubscribeMarketData
  // ï¿½Ë¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¨ï¿½ï¿½Æ¬ï¿½ï¿½ï¿½Õºï¿½ï¿½ï¿½Ê¿ï¿½ï¿½ï¿??
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  virtual void OnRtnDepthMarketData(ESunnyQuoteMarketField* pData) {};

  //ï¿½ï¿½ï¿½ï¿½Kï¿½ß£ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½ SubscribeKLineData
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  virtual void OnRtnKLineQuoteData(ESunnyQuoteKLine* pData) {};

  //////////////////////////////////////////////////////////////////////////
  /// ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½Õ¹ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½É²ï¿½ï¿½ï¿½×¢
  //////////////////////////////////////////////////////////////////////////
  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspSubscribeTickData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?
  //@param  pSpecificInstrument Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspUnSubscribeTickData(
      ESunnyQuoteSpecificInstrumentField* pSpecificInstrument,
      ESunnyQuoteErrorInfo* errorInfo, int nRequestID, bool bIsLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ê·ï¿½ï¿½ï¿½Ó¦ï¿½ï¿??
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryHisTickQuote(ESunnyQuoteTickField* pData,
                                    ESunnyQuoteErrorInfo* errorInfo,
                                    int requestID, bool isLast) {};

  //ï¿½ï¿½ï¿½ï¿½Ô­Ê¼ï¿½ï¿½ï¿½Õ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿??
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  virtual void OnRtnOriginalSnap(ESunnyQuoteMarketField* pData) {};

  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿??ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  // SubscribeTickData
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  virtual void OnRtnTickQuoteData(ESunnyQuoteTickField* pData) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õ½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿??
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQrySnapshotSection(ESunnyQuoteMarketField* pData,
                                       ESunnyQuoteErrorInfo* errorInfo,
                                       int requestID, bool isLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryTradingDay(ESunnyTradingDayField* pData,
                                  ESunnyQuoteErrorInfo* errorInfo,
                                  int requestID, bool isLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryTradeTime(ESunnyQuoteTradeTimeField* pData,
                                 ESunnyQuoteErrorInfo* errorInfo, int requestID,
                                 bool isLast) {};

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½Ó¦ï¿½ï¿½
  //@param  pData Ó¦ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param  errorInfo ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@param  bIsLast ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ó¦ï¿½ï¿??
  virtual void OnRspQryTradedayKLine(ESunnyQuoteKLine* pData,
                                     ESunnyQuoteErrorInfo* errorInfo,
                                     int requestID, bool isLast) {};
  //////////////////////////////////////////////////////////////////////////
};

//ï¿½ï¿½ï¿½ï¿½Apiï¿½ï¿½ï¿½ï¿½
class ESUNNYQUOTEAPI CEsunnyQuoteApi {
 protected:
  CEsunnyQuoteApi();
  virtual ~CEsunnyQuoteApi();

 public:
  //ï¿½ï¿½ï¿½ï¿½ApiÊµï¿½ï¿½
  static CEsunnyQuoteApi* CreateEsunnyQuoteApi();

  //ï¿½Í·ï¿½Apiï¿½ï¿½ï¿½ï¿½
  virtual void Release() = 0;

  //ï¿½ï¿½È¡ï¿½ï¿½Ç°Apiï¿½æ±¾ï¿½ï¿½Ï¢
  virtual const char* GetVersion() = 0;

  //ï¿½ï¿½È¡ï¿½ï¿½Ç°ï¿½ï¿½ï¿½Ó·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í£ï¿½ÊµÊ±,ï¿½ï¿½Ê·,ï¿½ï¿½Ê»ï¿½udp
  virtual QUOTE_SERVER_TYPE GetServerType() = 0;

  //×¢ï¿½ï¿½FensÇ°ï¿½Ãµï¿½Ö·ï¿½ï¿½ï¿½ï¿½×¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¨ï¿½ï¿½Fensï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï£ï¿½Fensï¿½Ô¶ï¿½Ñ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param ip  ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½IPï¿½ï¿½Ö·
  //@param port ï¿½ï¿½Ö¤ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë¿Úºï¿½
  virtual void RegisterFens(const char* ip, int port) = 0;

  //×¢ï¿½ï¿½FrontÇ°ï¿½Ãµï¿½Ö·ï¿½ï¿½ï¿½ï¿½×¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¨ï¿½ï¿½FrontÖ±ï¿½Ó½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param ip  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½IPï¿½ï¿½Ö·
  //@param port ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ë¿Úºï¿½
  virtual void RegisterFront(const char* ip, int port) = 0;

  //×¢ï¿½ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿??
  //@param pSpi ï¿½ï¿½ï¿½ï¿½ï¿½Ô»Øµï¿½ï¿½Ó¿ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿??
  virtual void RegisterSpi(CEsunnyQuoteSpi* pSpi) = 0;

  //ï¿½ï¿½Ê¼ï¿½ï¿½,ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param serverType ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í£ï¿½ÊµÊ±ï¿½ï¿½ï¿½ï¿½Ê·
  //@param waittime ï¿½È´ï¿½ï¿½ï¿½Ê±Ê±ï¿½ä£ºï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½
  virtual void Init(QUOTE_SERVER_TYPE serverType = QST_REALTIME,
                    int waittime = 1) = 0;

  //ï¿½ï¿½Â¼ï¿½ï¿½ï¿½ï¿½
  //@param login ï¿½ï¿½Â¼ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQuoteLogin(ESunnyQuoteLogin* login, int requestID) = 0;

  //ï¿½Ç³ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param userid ï¿½Ã»ï¿½id
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQuoteLogout(TEsunnyQuoteID userid, int requestID) = 0;

  //ï¿½Þ¸ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param req ï¿½Þ¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqChangePassword(ESunnyChangePassword* req, int requestID) = 0;

  //È¡ï¿½Ã½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½
  //@param exchangeEnum ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½Öµ
  //@ï¿½ï¿½ï¿½ï¿½Öµ ï¿½ï¿½ï¿½Ø¿ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½Òµï¿½
  virtual const char* GetExchangeString(
      const EXCHANGE_TYPE_ID exchangeEnum) = 0;

  //È¡ï¿½Ã½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½Öµ
  //@param eti
  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ï¿½OnRtnExchangeListï¿½Ð»ï¿½È¡ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ
  //ï¿½ï¿½ï¿½ï¿½EXCHANGE_TYPE_ID::ETI_UNKNOWNï¿½ï¿½Ã»ï¿½ï¿½ï¿½Òµï¿½
  virtual EXCHANGE_TYPE_ID GetExchangeEnum(const char* exchangeID) = 0;

  //ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int SubscribeMarketData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount) = 0;

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½Ä¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int UnSubscribeMarketData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount) = 0;

  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KLine
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int SubscribeKLineData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount,
      KLINE_TYPE_ID klineType = KLINE_TYPE_ID::KTI_MIN) = 0;

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½KLine
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int UnSubscribeKLineData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount,
      KLINE_TYPE_ID klineType = KLINE_TYPE_ID::KTI_MIN) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ô¼
  //@param req
  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ó£¨¸ï¿½ï¿½Ý²ï¿½ï¿½ï¿½Öµï¿½ï¿½Í¬ï¿½É²ï¿½Ñ¯ï¿½ï¿½ï¿½Ðºï¿½Ô¼ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½È£ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryInstrument(ESunnyQuoteReqQryInstrument* req,
                               int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é£¨ï¿½ï¿½ï¿½Ý¿Í»ï¿½È¨ï¿½Þ£ï¿½ï¿½É²ï¿½Ñ¯ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬ï¿½ï¿½Ýµï¿½ï¿½ï¿½ï¿½ï¿??
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQrySnapshotQuote(ESunnyQuoteReqQrySnapshot* req,
                                  int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½Kï¿½ï¿½ï¿½ï¿½ï¿½ó£¨¸ï¿½ï¿½Ý¿Í»ï¿½È¨ï¿½Þ£ï¿½ï¿½É²ï¿½Ñ¯ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½é£©
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryKLineQuote(ESunnyQuoteReqQryKLine* req, int requestID) = 0;

  //ï¿½ï¿½ï¿½ï¿½UDPï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½OnRtnUdpInfoDataï¿½Ðµï¿½ï¿½Ã¸Ãºï¿½ï¿½ï¿½
  //ï¿½Í»ï¿½ï¿½Ë¸ï¿½ï¿½ï¿½udpinfoï¿½Ðµï¿½exchangeï¿½ï¿½productsï¿½ï¿½ï¿½Ð¶Ï£ï¿½ï¿½Ç·ï¿½ï¿½ï¿½
  //@param udpinfo UDPï¿½ï¿½Ï¢
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int SubscribeUdpInfo(const ESunnyUdpInfoField& udpinfo) = 0;

  //ï¿½ï¿½ï¿½ï¿½UDPï¿½ï¿½ï¿½ï¿½
  //@param interface_addr
  //ï¿½ï¿½ï¿½Ø½ï¿½ï¿½ï¿½udpï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ipï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è±¸ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int StartUdpWork(const char* interface_addr = nullptr) = 0;

  //////////////////////////////////////////////////////////////////////////
  /// ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½Õ¹ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½É²ï¿½ï¿½ï¿½×¢
  //////////////////////////////////////////////////////////////////////////
  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int SubscribeTickData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount) = 0;

  //È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
  //@param ppInstrumentID
  //ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ó¼¯ºÏ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½Ô¼IDï¿½ï¿½
  //@param nCount ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int UnSubscribeTickData(
      ESunnyQuoteSpecificInstrumentField* ppInstrumentID[], int nCount) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½Ê·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ó£¨¸ï¿½ï¿½Ý¿Í»ï¿½ï¿½?ï¿½Þ£ï¿½ï¿½É²ï¿½Ñ¯ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬ï¿½ï¿½Ýµï¿½ï¿½ï¿½ï¿½ï¿??
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryTickQuote(ESunnyQuoteReqQryTick* req, int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½Õ½ï¿½ï¿½ï¿½
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½CTestEsunnyQuoteSpi
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQrySnapshotSection(ESunnyQuoteReqQrySnapshotSection* req,
                                    int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½Õ£ï¿½ï¿½ï¿½Ñ¯Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Äµï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ï¿½
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryTradingDay(ESunnyQuoteReqQryTradingDay* req,
                               int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½Î£ï¿½ï¿½ï¿½ï¿½?Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä³ï¿½ï¿½Æ·ï¿½ï¿½Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÕµÄ½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½Î£ï¿??
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryTradeTime(EsunnyQuoteReqQryTradetime* req,
                              int requestID) = 0;

  //ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½K-minï¿½ß£ï¿½ï¿½ï¿½Ñ¯Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä³ï¿½ï¿½ï¿½ï¿½Ô¼Ä³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½ï¿½ï¿½ï¿½Ð·ï¿½ï¿½ï¿½ï¿½ß£ï¿½
  //@param req ï¿½ï¿½Ñ¯ï¿½ï¿½ï¿½ï¿½
  //@param requestID ï¿½ï¿½ï¿½ï¿½ID
  //@ï¿½ï¿½ï¿½ï¿½Öµ 0:ï¿½É¹ï¿½
  virtual int ReqQryTradedayKline(EsunnyQuoteReqQryTradedayKline* req,
                                  int requestID) = 0;

  // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½Ä·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×¢ï¿½á£©
  //@param bFens
  //ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Fensï¿½ï¿½Ï¢ï¿½ï¿½Ä¬ï¿½ï¿½ï¿½ï¿½ï¿½Frontï¿½ï¿½Ï¢
  virtual void ClearServerInfo(bool bFens = false) = 0;
  //////////////////////////////////////////////////////////////////////////
};
}  // namespace esunny_quote_api

#endif
